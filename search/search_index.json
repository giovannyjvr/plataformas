{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o do Projeto Microservi\u00e7os \u2013 INSper","text":"<p>Aluno: Giovanny Russo</p>"},{"location":"#video-de-apresentacao","title":"V\u00eddeo de Apresenta\u00e7\u00e3o","text":""},{"location":"#visao-geral-do-repositorio","title":"Vis\u00e3o Geral do Reposit\u00f3rio","text":"<p>Este reposit\u00f3rio centraliza todos os trabalhos desenvolvidos no curso de Plataforma:</p> <ol> <li>Exerc\u00edcios Individuais (1\u20135)    Detalhamento em: exercises.md</li> <li>Projeto Integrador \"Fome\"    Estado atual descrito em: projeto.md</li> <li>Relat\u00f3rio de Custos    Estimativa de custos mensais no AWS: Plano-de-custos.md</li> </ol>"},{"location":"#como-navegar","title":"Como Navegar","text":"<ul> <li><code>docs/exercises.md</code> \u2014 detalhes e endpoints implementados em cada exerc\u00edcio individual.</li> <li><code>docs/project-status.md</code> \u2014 arquitetura Kubernetes, microservi\u00e7os, HPA e escalabilidade.   Observa\u00e7\u00e3o: Faltam as etapas de CI/CD e PASS.</li> <li><code>docs/cost-report.md</code> \u2014 simula\u00e7\u00e3o de custos no AWS Cost Explorer e Pricing Calculator.</li> </ul> <p>\u00a9 2025 Giovanny Russo \u2014 Todos os direitos reservados</p>"},{"location":"Plano-de-custos/","title":"Plano de Custos","text":""},{"location":"Plano-de-custos/#1-premissas-da-simulacao","title":"1. Premissas da simula\u00e7\u00e3o","text":"<ul> <li>Cluster EKS: 1 cluster, 730 h/m\u00eas @ US$ 0,10/h  </li> <li>N\u00f3s de trabalho: 2 \u00d7 t3.small Linux (2 vCPU, 2 GiB) on-demand, 730 h/m\u00eas  </li> <li>RDS PostgreSQL: 1 \u00d7 db.t3.micro Single-AZ, 20 GiB gp2, 730 h/m\u00eas  </li> <li>ALB (Load Balancer): 1 \u00d7 ALB, 730 h/m\u00eas  </li> <li>ALB LCU: 1 LCU ativo em m\u00e9dia, 730 h/m\u00eas  </li> <li>NAT Gateway: 1 \u00d7 NAT GW, 730 h/m\u00eas + 10 GiB de processamento  </li> <li>Transfer\u00eancia de dados de sa\u00edda: 50 GiB/m\u00eas  </li> <li>Horizonte: 1 m\u00eas (730 h)</li> </ul>"},{"location":"Plano-de-custos/#2-tabela-de-custos-mensais-estimados","title":"2. Tabela de custos mensais estimados","text":"Servi\u00e7o / Item Unidade Qtde Pre\u00e7o unit\u00e1rio Custo mensal (US$) EKS \u2013 Cluster management US$ por cluster-hora 1 \u00d7 730 h US$ 0,10/h 73,00 EC2 \u2013 Worker node t3.small US$ por inst-hora 2 \u00d7 730 h US$ 0,0208/h 30,37 RDS \u2013 db.t3.micro (Single-AZ) US$ por inst-hora 1 \u00d7 730 h US$ 0,017/h 12,41 RDS Storage (gp2) US$ por GiB-m\u00eas 20 GiB US$ 0,10/GiB-m\u00eas 2,00 ALB \u2013 Load Balancer US$ por bal-hora 1 \u00d7 730 h US$ 0,0225/h 16,43 ALB \u2013 LCU (Load Balancing Capacity Unit) US$ por LCU-hora 1 \u00d7 730 h US$ 0,008/h 5,84 NAT Gateway US$ por nat-hora 1 \u00d7 730 h US$ 0,045/h 32,85 NAT Data Processing US$ por GiB 10 GiB US$ 0,045/GiB 0,45 Transfer\u00eancia de dados (sa\u00edda) US$ por GiB 50 GiB US$ 0,09/GiB 4,50 Total Mensal Estimado 177,85 US$"},{"location":"Plano-de-custos/#4-analise-de-custos","title":"4. An\u00e1lise de Custos","text":""},{"location":"Plano-de-custos/#premissas","title":"Premissas","text":"<ul> <li>Cluster EKS rodando 24\u00d77 (730 h/m\u00eas)  </li> <li>2 n\u00f3s t3.small (2 vCPU, 2 GiB) on-demand  </li> <li>RDS PostgreSQL db.t3.micro Single-AZ + 20 GiB gp2  </li> <li>Application Load Balancer (ALB) + 1 LCU m\u00e9dio  </li> <li>NAT Gateway para sa\u00edda de tr\u00e1fego (10 GiB)  </li> <li>50 GiB de transfer\u00eancia de dados de sa\u00edda  </li> </ul> <p>Tarifas conforme AWS Pricing Calculator (https://calculator.aws/) em junho/2025.</p>"},{"location":"Plano-de-custos/#custos-mensais-estimados","title":"Custos Mensais Estimados","text":"Servi\u00e7o / Item Qtde Pre\u00e7o unit\u00e1rio Custo mensal (US$) EKS \u2013 Cluster management 1 \u00d7 730 h US$ 0,10/h 73,00 EC2 \u2013 Worker node t3.small 2 \u00d7 730 h US$ 0,0208/h 30,37 RDS \u2013 db.t3.micro (Single-AZ) 1 \u00d7 730 h US$ 0,017/h 12,41 RDS Storage (gp2) 20 GiB US$ 0,10/GiB-m\u00eas 2,00 ALB \u2013 Load Balancer 1 \u00d7 730 h US$ 0,0225/h 16,43 ALB \u2013 LCU (Load Balancing Capacity Unit) 1 \u00d7 730 h US$ 0,008/h 5,84 NAT Gateway 1 \u00d7 730 h US$ 0,045/h 32,85 NAT Data Processing 10 GiB US$ 0,045/GiB 0,45 Transfer\u00eancia de dados (sa\u00edda) 50 GiB US$ 0,09/GiB 4,50 Total Mensal Estimado 177,85 US$"},{"location":"apresentacao/","title":"Apresenta\u00e7\u00e3o do Projeto","text":"<p>Nesta se\u00e7\u00e3o, voc\u00ea pode baixar os slides e assistir ao v\u00eddeo de 2\u20133 minutos.</p>"},{"location":"apresentacao/#slides-em-pdf","title":"Slides em PDF","text":"<p>Baixe os slides da apresenta\u00e7\u00e3o (10\u201315 p\u00e1ginas) aqui: Download dos Slides</p>"},{"location":"apresentacao/#video-de-apresentacao","title":"V\u00eddeo de Apresenta\u00e7\u00e3o","text":"<p>Abaixo est\u00e1 embedado o v\u00eddeo de 2\u20133 minutos (YouTube/Drive).  </p>"},{"location":"exe1/","title":"Exerc\u00edcio 1 \u2013 Account Service","text":""},{"location":"exe1/#objetivo","title":"Objetivo","text":"<p>O primeiro exerc\u00edcio consistiu em desenvolver o microservi\u00e7o Account Service, respons\u00e1vel pelo gerenciamento de clientes (contas) de forma simples, expondo endpoints REST para cria\u00e7\u00e3o e consulta de contas.</p>"},{"location":"exe1/#tecnologias-e-ferramentas","title":"Tecnologias e Ferramentas","text":"<ul> <li>Java 21 e Spring Boot 3.x</li> <li>Spring Data JPA para persist\u00eancia</li> <li>PostgreSQL (em Kubernetes) como banco de dados relacional</li> <li>Flyway para migra\u00e7\u00f5es de esquema</li> <li>Docker para empacotamento da imagem</li> <li>Kubernetes (manifests) para deploy</li> <li>HPA para autoescalonamento baseado em CPU</li> <li>k6 para testes de carga</li> </ul>"},{"location":"exe1/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>account-service/\n\u251c\u2500\u2500 src/main/java/store/account/          # C\u00f3digo-fonte Java\n\u2502   \u251c\u2500\u2500 AccountApplication.java         # Classe principal\n\u2502   \u251c\u2500\u2500 controller/AccountController.java\n\u2502   \u251c\u2500\u2500 model/Account.java               \n\u2502   \u251c\u2500\u2500 repository/AccountRepository.java\n\u2502   \u251c\u2500\u2500 service/AccountService.java     \n\u2502   \u2514\u2500\u2500 exception/ResourceNotFoundException.java\n\u251c\u2500\u2500 src/main/resources/\n\u2502   \u251c\u2500\u2500 application.yml                  # Configura\u00e7\u00f5es (DB, Flyway)\n\u2502   \u2514\u2500\u2500 db/migration/V1__create_account_table.sql\n\u251c\u2500\u2500 Dockerfile                           # Empacotamento da aplica\u00e7\u00e3o\n\u2514\u2500\u2500 k8s/\n    \u251c\u2500\u2500 account.yaml                     # Deployment e Service\n    \u2514\u2500\u2500 hpa-account.yaml                 # HorizontalPodAutoscaler\n</code></pre>"},{"location":"exe1/#principais-componentes","title":"Principais Componentes","text":""},{"location":"exe1/#model-account","title":"Model (Account)","text":"<p>Entidade <code>Account</code> com os campos:</p> <ul> <li><code>id</code> (Long, chave prim\u00e1ria)</li> <li><code>name</code> (String)</li> <li><code>email</code> (String)</li> </ul>"},{"location":"exe1/#repository","title":"Repository","text":"<p>Interface <code>AccountRepository</code> estende <code>JpaRepository&lt;Account, Long&gt;</code>, fornecendo CRUD b\u00e1sico.</p>"},{"location":"exe1/#service","title":"Service","text":"<p>Classe <code>AccountService</code> encapsula l\u00f3gica de neg\u00f3cio:</p> <ul> <li><code>findAll()</code> retorna todas as contas</li> <li><code>findById(id)</code> retorna conta por ID ou lan\u00e7a <code>ResourceNotFoundException</code></li> <li><code>create(Account)</code> persiste nova conta</li> </ul>"},{"location":"exe1/#controller","title":"Controller","text":"<p>Classe <code>AccountController</code> exp\u00f5e endpoints:</p> M\u00e9todo Endpoint Descri\u00e7\u00e3o GET <code>/account</code> Lista todas as contas GET <code>/account/{id}</code> Consulta conta por ID POST <code>/account</code> Cria nova conta <p>As requisi\u00e7\u00f5es e respostas usam JSON.</p>"},{"location":"exe1/#migracoes-de-banco-flyway","title":"Migra\u00e7\u00f5es de Banco (Flyway)","text":"<p>O script <code>V1__create_account_table.sql</code> cria a tabela <code>account</code> com colunas (<code>id</code>, <code>name</code>, <code>email</code>). Flyway executa a migra\u00e7\u00e3o automaticamente na inicializa\u00e7\u00e3o.</p>"},{"location":"exe1/#docker","title":"Docker","text":"<p>O <code>Dockerfile</code> baseia-se em <code>openjdk:21-slim</code>, copia o JAR gerado pelo Maven e define o comando de execu\u00e7\u00e3o:</p> <pre><code>FROM openjdk:21-slim\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"exe1/#kubernetes","title":"Kubernetes","text":"<ul> <li>Deployment (<code>account.yaml</code>): define 1 r\u00e9plica inicialmente, requests/limits de CPU/mem\u00f3ria e vari\u00e1veis de ambiente para conex\u00e3o com PostgreSQL.</li> <li>Service: tipo <code>LoadBalancer</code>, exp\u00f5e a porta 8080.</li> <li>HPA (<code>hpa-account.yaml</code>): escala entre 1 e 5 pods com meta de 50% de uso de CPU.</li> </ul>"},{"location":"exe1/#testes-de-carga-k6","title":"Testes de Carga (k6)","text":"<p>Script <code>loadtest.js</code> com:</p> <pre><code>import http from 'k6/http';\nimport { check, sleep } from 'k6';\nexport let options = { vus: 20, duration: '30s'};\nexport default function() {\n  let res = http.get('http://&lt;ELB_URL&gt;:8080/account');\n  check(res, { 'status 200': (r) =&gt; r.status === 200 });\n  sleep(1);\n}\n</code></pre> <p>Executando <code>k6 run loadtest.js</code> mostrou que o servi\u00e7o responde dentro do SLA (p95 &lt; 500ms) e a HPA escalou conforme esperado.</p> <p><sub>Este documento faz parte da documenta\u00e7\u00e3o geral dos Exerc\u00edcios Individuais. Para detalhes dos demais exerc\u00edcios, veja <code>docs/exercises.md</code>.</sub></p>"},{"location":"exe2/","title":"Exercicio 2","text":"<pre><code># Exerc\u00edcio 2 \u2013 Product Service\n\n**Aluno:** Giovanny Russo  \n**Status:** Completo at\u00e9 Orquestra\u00e7\u00e3o e Testes de Carga\n\n---\n\n## 1. Objetivo\n\nImplementar um microservi\u00e7o de cat\u00e1logo de produtos com:\n\n- Endpoints CRUD (Create, Read, Update, Delete)  \n- Banco em mem\u00f3ria (H2)  \n- Containeriza\u00e7\u00e3o Docker  \n- Deploy em Kubernetes  \n- Testes de carga com K6  \n- Horizontal Pod Autoscaler (HPA)  \n\n---\n\n## 2. Estrutura do C\u00f3digo\n</code></pre> <p>product-service/ \u251c\u2500\u2500 src/ \u2502   \u251c\u2500\u2500 main/ \u2502   \u2502   \u251c\u2500\u2500 java/com/insper/product/ \u2502   \u2502   \u2502   \u251c\u2500\u2500 model/Product.java \u2502   \u2502   \u2502   \u251c\u2500\u2500 repository/ProductRepository.java \u2502   \u2502   \u2502   \u2514\u2500\u2500 controller/ProductController.java \u2502   \u2502   \u2514\u2500\u2500 resources/ \u2502   \u2502       \u2514\u2500\u2500 application.properties \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 pom.xml</p> <pre><code>---\n\n## 3. Modelo e Persist\u00eancia\n\n- **`Product.java`**: entidade JPA com campos `id`, `name`, `description`, `price`.  \n- **H2**: banco em mem\u00f3ria configurado em `application.properties`:\n  ```properties\n  spring.h2.console.enabled=true\n  spring.datasource.url=jdbc:h2:mem:productdb\n</code></pre> <ul> <li><code>ProductRepository</code>: estende <code>JpaRepository&lt;Product, Long&gt;</code> para CRUD autom\u00e1tico.</li> </ul>"},{"location":"exe2/#4-api-rest","title":"4. API REST","text":"<p>No controlador <code>ProductController.java</code> foram implementados:</p> M\u00e9todo HTTP Endpoint A\u00e7\u00e3o GET <code>/product</code> Listar todos os produtos GET <code>/product/{id}</code> Buscar produto por ID POST <code>/product</code> Criar novo produto (201) PUT <code>/product/{id}</code> Atualizar produto existente DELETE <code>/product/{id}</code> Remover produto (204) <p>Resposta com c\u00f3digos HTTP adequados (200, 201, 404, 204).</p>"},{"location":"exe2/#5-dockerizacao","title":"5. Dockeriza\u00e7\u00e3o","text":"<p><code>Dockerfile</code> multistage:</p> <pre><code># build\nFROM maven:3.8.8-jdk-17-slim AS builder\nWORKDIR /app\nCOPY pom.xml .\nCOPY src ./src\nRUN mvn clean package -DskipTests\n\n# runtime\nFROM openjdk:17-jdk-slim\nWORKDIR /app\nCOPY --from=builder /app/target/product-service-0.0.1-SNAPSHOT.jar app.jar\nEXPOSE 8080\nENTRYPOINT [\"java\",\"-jar\",\"/app/app.jar\"]\n</code></pre> <p>Gera imagem plataforma-product-service\\:latest.</p>"},{"location":"exe2/#6-deploy-em-kubernetes","title":"6. Deploy em Kubernetes","text":"<p>Arquivo <code>k8s/product.yaml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\n  labels: { app: product }\nspec:\n  replicas: 2\n  selector: { matchLabels: { app: product } }\n  template:\n    metadata: { labels: { app: product } }\n    spec:\n      containers:\n        - name: product\n          image: 767397705738.dkr.ecr.sa-east-1.amazonaws.com/plataforma-product-service:latest\n          ports: [{ containerPort: 8080 }]\n          resources:\n            requests: { cpu: \"100m\", memory: \"128Mi\" }\n            limits:   { cpu: \"200m\", memory: \"256Mi\" }\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: product-service\n  labels: { app: product }\nspec:\n  type: LoadBalancer\n  selector: { app: product }\n  ports: [{ port: 8080, targetPort: 8080 }]\n</code></pre> <ul> <li>Deployment: 2 r\u00e9plicas</li> <li>Service: LoadBalancer expondo porta 8080</li> </ul>"},{"location":"exe2/#7-testes-de-carga-com-k6","title":"7. Testes de Carga com K6","text":"<p>Script <code>k6/loadtest-product.js</code>:</p> <pre><code>import http from 'k6/http';\nimport { check, sleep } from 'k6';\n\nexport const options = {\n  vus: 20,\n  duration: '30s',\n  thresholds: { http_req_duration: ['p(95)&lt;500'] },\n};\n\nconst BASE = 'http://&lt;SEU_ELB_PRODUCT&gt;:8080/product';\n\nexport default function () {\n  const res = http.get(BASE);\n  check(res, {\n    'status 200': r =&gt; r.status === 200,\n    'body n\u00e3o vazio': r =&gt; r.body &amp;&amp; r.body.length &gt; 0,\n  });\n  sleep(1);\n}\n</code></pre> <ul> <li>Executado com <code>k6 run loadtest-product.js</code></li> <li>M\u00e9tricas de lat\u00eancia dentro de p(95)&lt;500 ms</li> </ul>"},{"location":"exe2/#8-autoscaling-hpa","title":"8. Autoscaling (HPA)","text":"<p>Criado HPA para Deployment <code>product</code>:</p> <pre><code>kubectl autoscale deployment product \\\n  --cpu-percent=50 \\\n  --min=1 --max=5\n\nkubectl get hpa product\n</code></pre> <ul> <li>HPA monitora CPU e escala de 1 at\u00e9 5 r\u00e9plicas conforme necessidade.</li> </ul>"},{"location":"exe3/","title":"Exercicio 3","text":"<pre><code># Exerc\u00edcio 3 \u2013 Exchange Service\n\n**Objetivo:** Implementar um microservi\u00e7o em Python que fa\u00e7a convers\u00e3o de valores entre duas moedas, consultando uma API de c\u00e2mbio p\u00fablica.\n\n---\n\n## 1. Stack e Ferramentas\n\n- **Linguagem &amp; Framework**  \n  - Python 3.x  \n  - [FastAPI](https://fastapi.tiangolo.com/) para constru\u00e7\u00e3o da API  \n  - Uvicorn como ASGI server  \n- **HTTP Client**  \n  - Biblioteca `requests` para chamada a API externa de c\u00e2mbio  \n- **Cont\u00eainer**  \n  - Docker + Dockerfile customizado  \n- **Orquestra\u00e7\u00e3o**  \n  - Kubernetes Deployment &amp; Service  \n- **Testes de carga**  \n  - k6 para gerar carga e validar thresholds (`p(95)&lt;500ms`)\n\n---\n\n## 2. Endpoints\n\n### 2.1. `GET /exchange-rate`\n\n- **Query Parameters**  \n  - `from` \u2013 sigla da moeda de origem (e.g. `USD`)  \n  - `to`   \u2013 sigla da moeda de destino (e.g. `BRL`)  \n- **Resposta de Sucesso**  \n  ```json\n  {\n    \"from\": \"USD\",\n    \"to\": \"BRL\",\n    \"rate\": 5.24\n  }\n</code></pre> <ul> <li> <p>Erros</p> </li> <li> <p>400 se par\u00e2metros faltando</p> </li> <li>502 se falha ao chamar API externa</li> </ul>"},{"location":"exe3/#22-post-exchange","title":"2.2. <code>POST /exchange</code>","text":"<ul> <li>Body (JSON)</li> </ul> <p><code>json   {     \"from\": \"USD\",     \"to\": \"BRL\",     \"quantity\": 100   }</code> * Resposta de Sucesso</p> <p><code>json   {     \"from\": \"USD\",     \"to\": \"BRL\",     \"rate\": 5.24,     \"quantity\": 100,     \"result\": 524.0   }</code> * Erros</p> <ul> <li>400 se body mal-formado</li> <li>502 se falha na API externa</li> </ul>"},{"location":"exe3/#3-logica-de-implementacao","title":"3. L\u00f3gica de Implementa\u00e7\u00e3o","text":"<ol> <li> <p>Valida\u00e7\u00e3o de entrada</p> </li> <li> <p>Confirma exist\u00eancia de todos os campos necess\u00e1rios.</p> </li> <li> <p>Chamada \u00e0 API</p> </li> <li> <p>Usa <code>requests.get(\"https://api.exchangerate.host/latest\", params={\u2026})</code>.</p> </li> <li>Extrai a taxa de c\u00e2mbio desejada do JSON retornado.</li> <li> <p>C\u00e1lculo</p> </li> <li> <p>Multiplica <code>quantity \u00d7 rate</code> e inclui no payload de sa\u00edda.</p> </li> <li> <p>Tratamento de erros</p> </li> <li> <p>Converte timeouts ou status !=200 em HTTP 502 para o cliente.</p> </li> <li>Valida\u00e7\u00f5es incorretas retornam HTTP 400.</li> </ol>"},{"location":"exe3/#4-docker","title":"4. Docker","text":"<ul> <li>Base image: <code>python:3.9-slim</code></li> <li> <p>Passos principais no <code>Dockerfile</code>:</p> </li> <li> <p>Copia <code>requirements.txt</code> e instala depend\u00eancias.</p> </li> <li>Copia c\u00f3digo fonte (<code>exchange.py</code>, <code>main.py</code>, etc.).</li> <li>Exp\u00f5e porta <code>8000</code> e configura <code>CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\"]</code>.</li> </ul>"},{"location":"exe3/#5-kubernetes","title":"5. Kubernetes","text":"<ul> <li> <p>Deployment (<code>k8s/exchange-deployment.yaml</code>):</p> </li> <li> <p>ReplicaSet de 2 r\u00e9plicas</p> </li> <li><code>resources.requests</code>/<code>limits</code> para CPU e mem\u00f3ria</li> <li> <p>Service (<code>k8s/exchange-service.yaml</code>):</p> </li> <li> <p><code>type: LoadBalancer</code></p> </li> <li>Roteia porta <code>80</code> para <code>podPort: 8000</code></li> </ul>"},{"location":"exe3/#6-testes-de-carga","title":"6. Testes de Carga","text":"<ul> <li>Script k6 (<code>k6/loadtest-exchange.js</code>):</li> </ul> <p>```js   import http from 'k6/http';   import { check, sleep } from 'k6';</p> <p>export const options = {     vus: 20,     duration: '30s',     thresholds: { http_req_duration: ['p(95)&lt;500'] },   };</p> <p>const BASE = 'http://'; <p>export default function () {     const res = http.get(<code>${BASE}/exchange-rate?from=USD&amp;to=BRL</code>);     check(res, {       'rate 200': (r) =&gt; r.status === 200,       'rate body': (r) =&gt; r.json('rate') &gt; 0,     });</p> <pre><code>const r2 = http.post(\n  `${BASE}/exchange`,\n  JSON.stringify({ from: 'USD', to: 'BRL', quantity: 10 }),\n  { headers: { 'Content-Type': 'application/json' } }\n);\ncheck(r2, {\n  'exchange 200': (r) =&gt; r.status === 200,\n  'exchange result': (r) =&gt; r.json('result') &gt; 0,\n});\n\nsleep(1);\n</code></pre> <p>}   ``` * Execu\u00e7\u00e3o:</p> <p><code>bash   k6 run k6/loadtest-exchange.js</code> * Resultado esperado:</p> <ul> <li>95% das requisi\u00e7\u00f5es &lt; 500 ms</li> <li>0% de erros ap\u00f3s endpoints subirem</li> </ul> <p>Pr\u00f3ximo:</p> <ul> <li>Verifique o <code>docs/exercises.md</code> e adicione o link para este <code>docs/exe3.md</code>.</li> <li>Passe para o Exercise 4 em <code>docs/exe4.md</code>.</li> </ul> <pre><code>**Como usar**  \n1. Salve esse arquivo como `docs/exe3.md`.  \n2. No seu `docs/exercises.md`, crie uma se\u00e7\u00e3o:\n\n   ```markdown\n   - **Exchange Service (Exerc\u00edcio 3):** detalhes de endpoints, Docker, K8s e testes de carga.  [\ud83d\udcdd ver exe3.md](exe3.md)\n</code></pre>"},{"location":"exe4/","title":"Exercicio 4","text":"<pre><code># Exercicio 4 \u2013 Servi\u00e7o de Autentica\u00e7\u00e3o e Integra\u00e7\u00e3o JWT no API Gateway\n\n**Objetivo**  \nImplementar um microservi\u00e7o de autentica\u00e7\u00e3o (p-auth-service) que emita e valide JWTs, e configurar o API Gateway (gateway-service) para proteger os demais endpoints usando esses tokens.\n\n---\n\n## 1. Vis\u00e3o Geral\n\n1. **p-auth-service**  \n   - Spring Boot + Spring Security  \n   - Emiss\u00e3o de JWT no endpoint `/auth/login`  \n   - Persist\u00eancia em H2 (dev) / PostgreSQL (prod)  \n   - Endpoints:\n     - `POST /auth/register` \u2013 cria novo usu\u00e1rio  \n     - `POST /auth/login` \u2013 autentica e retorna `{ accessToken, username }`  \n2. **gateway-service**  \n   - Spring Cloud Gateway  \n   - Roteia e protege chamadas para `/account/**`, `/product/**`, etc.  \n   - Extrai e valida JWT de `Authorization: Bearer &lt;token&gt;`  \n   - Forwarding das requisi\u00e7\u00f5es autenticadas aos microservi\u00e7os de neg\u00f3cio  \n\n---\n\n## 2. Tecnologias e Depend\u00eancias\n\n- **Spring Boot 3.x**  \n- **Spring Security**  \n- **jjwt** (io.jsonwebtoken) para gera\u00e7\u00e3o/valida\u00e7\u00e3o de tokens  \n- **Spring Data JPA** + **H2** (dev) / **PostgreSQL** (prod)  \n- **Spring Cloud Gateway**  \n- **Lombok**, **MapStruct** (opcionais)  \n\n---\n\n## 3. Estrutura do p-auth-service\n</code></pre> <p>p-auth-service/ \u251c\u2500\u2500 src/main/java/.../auth/ \u2502   \u251c\u2500\u2500 controller/AuthController.java \u2502   \u251c\u2500\u2500 dto/LoginRequest.java \u2502   \u251c\u2500\u2500 dto/LoginResponse.java \u2502   \u251c\u2500\u2500 dto/RegisterRequest.java \u2502   \u251c\u2500\u2500 model/User.java \u2502   \u251c\u2500\u2500 repository/UserRepository.java \u2502   \u251c\u2500\u2500 security/JwtUtil.java \u2502   \u2514\u2500\u2500 security/SecurityConfig.java \u2514\u2500\u2500 src/main/resources/application.yml</p> <pre><code>### 3.1 Modelo de Usu\u00e1rio\n\n```java\n@Entity\npublic class User {\n  @Id @GeneratedValue\n  private Long id;\n  @Column(unique=true)\n  private String username;\n  private String password;                // BCrypt-hashed\n  private String roles;                   // e.g. \"ROLE_USER\"\n}\n</code></pre>"},{"location":"exe4/#32-repositorio","title":"3.2 Reposit\u00f3rio","text":"<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n  Optional&lt;User&gt; findByUsername(String username);\n}\n</code></pre>"},{"location":"exe4/#4-fluxo-de-autenticacao-jwt","title":"4. Fluxo de Autentica\u00e7\u00e3o (JWT)","text":"<ol> <li> <p>Registro (<code>/auth/register</code>)</p> </li> <li> <p>Recebe <code>{ username, password }</code>,</p> </li> <li>Hasheia senha com <code>BCryptPasswordEncoder</code>,</li> <li> <p>Persiste novo <code>User</code> no banco.</p> </li> <li> <p>Login (<code>/auth/login</code>)</p> </li> <li> <p>Recebe <code>{ username, password }</code>,</p> </li> <li>Autentica com <code>AuthenticationManager</code>,</li> <li> <p>Gera JWT:</p> <p><code>java  String token = Jwts.builder()      .setSubject(username)      .claim(\"roles\", roles)      .setIssuedAt(now)      .setExpiration(expiry)      .signWith(secretKey)      .compact();</code>    * Retorna <code>{ accessToken: token, username }</code>.</p> </li> <li> <p>Valida\u00e7\u00e3o de JWT</p> </li> <li> <p><code>JwtUtil.validateToken(token)</code> verifica assinatura e expira\u00e7\u00e3o,</p> </li> <li>Filtra cada requisi\u00e7\u00e3o protegida em <code>JwtAuthenticationFilter</code> \u2014 injeta <code>UsernamePasswordAuthenticationToken</code> no <code>SecurityContext</code>.</li> </ol>"},{"location":"exe4/#5-configuracao-de-seguranca","title":"5. Configura\u00e7\u00e3o de Seguran\u00e7a","text":"<pre><code>@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http\n      .csrf().disable()\n      .authorizeRequests()\n        .antMatchers(\"/auth/**\").permitAll()\n        .anyRequest().authenticated()\n      .and()\n      .addFilter(new JwtAuthenticationFilter(authenticationManager(), jwtUtil))\n      .addFilter(new JwtAuthorizationFilter(authenticationManager(), jwtUtil));\n  }\n}\n</code></pre> <ul> <li>Permiss\u00e3o para <code>/auth/register</code> e <code>/auth/login</code>.</li> <li>Protegidos todos os demais endpoints.</li> </ul>"},{"location":"exe4/#6-integracao-no-gateway-gateway-service","title":"6. Integra\u00e7\u00e3o no Gateway (gateway-service)","text":"<p>Em <code>application.yml</code>:</p> <pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n        - id: auth\n          uri: lb://p-auth-service\n          predicates:\n            - Path=/auth/**\n\n        - id: account\n          uri: lb://account-service\n          predicates:\n            - Path=/account/**\n\n        - id: product\n          uri: lb://product-service\n          predicates:\n            - Path=/product/**\n\n      default-filters:\n        - name: RemoveRequestHeader\n          args:\n            headerName: Cookie\n</code></pre> <p>E um filtro global para JWT:</p> <pre><code>@Component\npublic class JwtGlobalFilter implements GlobalFilter {\n  public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n    String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);\n    if (authHeader == null || !jwtUtil.validateToken(authHeader.substring(7))) {\n      exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);\n      return exchange.getResponse().setComplete();\n    }\n    return chain.filter(exchange);\n  }\n}\n</code></pre>"},{"location":"exe4/#7-testes-e-verificacao","title":"7. Testes e Verifica\u00e7\u00e3o","text":"<ul> <li>Registro / Login via <code>curl</code> ou Postman:</li> </ul> <p>```bash   curl -X POST http:///auth/register \\     -H \"Content-Type: application/json\" \\     -d '{\"username\":\"store\",\"password\":\"store\"}' <p>curl -X POST http:///auth/login \\     -H \"Content-Type: application/json\" \\     -d '{\"username\":\"store\",\"password\":\"store\"}'   ``` * Acesso Protegido: <p><code>bash   TOKEN=$(curl \u2026/auth/login \u2026 | jq -r .accessToken)   curl http://&lt;ELB&gt;/account \\     -H \"Authorization: Bearer $TOKEN\"</code> * Gateway s\u00f3 deixa passar chamadas com JWT v\u00e1lido; retorna 401 caso contr\u00e1rio.</p>"},{"location":"exe4/#8-conclusao","title":"8. Conclus\u00e3o","text":"<p>Com o Exerc\u00edcio 4, voc\u00ea:</p> <ul> <li>Criou um servi\u00e7o de autentica\u00e7\u00e3o com emiss\u00e3o e valida\u00e7\u00e3o de JWT.</li> <li>Protegeu os microservi\u00e7os atr\u00e1s do Gateway, garantindo que apenas requisi\u00e7\u00f5es autenticadas sejam encaminhadas.</li> <li>Validou via testes manuais (curl/Postman) e integrou no ambiente Kubernetes (Deployment + Service + HPA).</li> </ul> <p>Para detalhes de configura\u00e7\u00e3o de Kubernetes, consulte o docs/k8s.md.</p> <p>Giovanny Russo \u2013 Junho 2025</p> <p>```</p>"},{"location":"exe5/","title":"Exercicio 5","text":"<pre><code># Exercicio 5 \u2013 Orquestra\u00e7\u00e3o Kubernetes com HPA e Testes de Carga\n\n**Objetivo**  \nOrquestrar seus microservi\u00e7os no Kubernetes (EKS), expondo-os via LoadBalancer, configurando **Horizontal Pod Autoscaler (HPA)** com base em m\u00e9tricas de CPU, e validando o escalonamento autom\u00e1tico por meio de testes de carga (k6).\n\n---\n\n## 1. Pr\u00e9-requisitos no Cluster\n\n1. **metrics-server** instalado e funcionando no namespace `kube-system`  \n   ```bash\n   kubectl get deployment metrics-server -n kube-system\n   # metrics-server   2/2     2            2           2d15h\n</code></pre> <ol> <li>Contexto apontando para seu cluster EKS.</li> </ol>"},{"location":"exe5/#2-manifestos-kubernetes","title":"2. Manifestos Kubernetes","text":""},{"location":"exe5/#21-accountyaml","title":"2.1 account.yaml","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\n  labels:\n    app: account\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: account\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n      - name: account\n        image: 767397705738.dkr.ecr.sa-east-1.amazonaws.com/plataforma-account-service:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DATABASE_HOST\n          value: postgres\n        # ... outras vari\u00e1veis de ambiente ...\n        resources:\n          requests:\n            cpu: \"50m\"\n            memory: \"200Mi\"\n          limits:\n            cpu: \"200m\"\n            memory: \"300Mi\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: account\n  labels:\n    app: account\nspec:\n  type: LoadBalancer\n  selector:\n    app: account\n  ports:\n  - port: 8080\n    targetPort: 8080\n</code></pre>"},{"location":"exe5/#22-productyaml","title":"2.2 product.yaml","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\n  labels:\n    app: product\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n      - name: product\n        image: 767397705738.dkr.ecr.sa-east-1.amazonaws.com/plataforma-product-service:latest\n        ports:\n        - containerPort: 8080\n        resources:\n          requests:\n            cpu: \"50m\"\n            memory: \"200Mi\"\n          limits:\n            cpu: \"200m\"\n            memory: \"300Mi\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: product-service\n  labels:\n    app: product\nspec:\n  type: LoadBalancer\n  selector:\n    app: product\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n</code></pre>"},{"location":"exe5/#3-deploy-e-exposicao","title":"3. Deploy e Exposi\u00e7\u00e3o","text":"<pre><code>kubectl apply -f account.yaml\nkubectl apply -f product.yaml\n\n# Verificar servi\u00e7os e EXTERNAL-IP\nkubectl get svc -l app=account,app=product\n</code></pre>"},{"location":"exe5/#4-configuracao-do-hpa","title":"4. Configura\u00e7\u00e3o do HPA","text":"<p>Criar HPA apontando para uso de CPU em 50%, entre 1 e 5 r\u00e9plicas:</p> <pre><code>kubectl autoscale deployment account \\\n  --cpu-percent=50 \\\n  --min=1 --max=5\n\nkubectl autoscale deployment product \\\n  --cpu-percent=50 \\\n  --min=1 --max=5\n</code></pre> <p>Verificar status do HPA:</p> <pre><code>kubectl get hpa\n# NAME      REFERENCE            TARGETS     MINPODS  MAXPODS  REPLICAS\n# account   Deployment/account   cpu: 4%/50% 1        5        1\n# product   Deployment/product   cpu: 2%/50% 1        5        1\n</code></pre>"},{"location":"exe5/#5-testes-de-carga-e-validacao-de-escalonamento","title":"5. Testes de Carga e Valida\u00e7\u00e3o de Escalonamento","text":"<ol> <li>Script k6 (<code>loadtest.js</code>), simulando 50 VUs por 1 minuto:</li> </ol> <p>```js    import http from 'k6/http'    import { sleep } from 'k6'</p> <p>export const options = {      vus: 50,      duration: '1m',    }</p> <p>const ACCOUNT = 'http://:8080/account'    export default () =&gt; {      http.get(ACCOUNT)      sleep(1)    }    ``` <ol> <li>Rodar o teste:</li> </ol> <p><code>bash    k6 run loadtest.js</code></p> <ol> <li>Observar HPA em paralelo:</li> </ol> <p><code>bash    kubectl get hpa account product -w</code></p> <ul> <li>Durante a carga, o HPA escalou account de 1 at\u00e9 5 r\u00e9plicas conforme CPU ultrapassou 50%.</li> <li>Ap\u00f3s cessar a carga, a contagem de r\u00e9plicas voltou a 1.</li> </ul>"},{"location":"exe5/#6-conclusao","title":"6. Conclus\u00e3o","text":"<ul> <li>Voc\u00ea possui Deployments e Services para <code>account</code> e <code>product</code>.</li> <li>Implementou requests/limits de CPU/Mem\u00f3ria para cada container.</li> <li>Configurou HPA para escalonamento autom\u00e1tico com base em m\u00e9trica de CPU.</li> <li>Validou o escalonamento via testes de carga (k6).</li> </ul> <p>Pr\u00f3ximo passo: documentar CI/CD (exerc\u00edcio 6) e entrega de v\u00eddeo de demonstra\u00e7\u00e3o.</p>"},{"location":"exercises/","title":"Exerc\u00edcios Individuais","text":"<p>Este documento re\u00fane um panorama dos 5 Exerc\u00edcios Individuais desenvolvidos ao longo do curso de Plataforma. Para cada exerc\u00edcio voc\u00ea encontra uma descri\u00e7\u00e3o do que foi implementado e um link para o detalhamento completo em um arquivo dedicado.</p> Exerc\u00edcio T\u00f3pico Descri\u00e7\u00e3o resumida Detalhes 1 Account Service Microservi\u00e7o de conta de usu\u00e1rio, com endpoints de registro e autentica\u00e7\u00e3o via JWT. exe1.md 2 Product Service Microservi\u00e7o de produtos, com CRUD completo de itens e persist\u00eancia em banco em mem\u00f3ria (H2). exe2.md 3 Order Service Microservi\u00e7o de pedidos, com processamento de compras, relacionamento com Account e Product. exe3.md 4 Authentication Gateway API Gateway com roteamento para os demais servi\u00e7os e valida\u00e7\u00e3o de tokens JWT antes de encaminhar as requisi\u00e7\u00f5es. exe4.md 5 Exchange Service Servi\u00e7o de c\u00e2mbio, que converte pre\u00e7os entre moedas diferentes usando taxa externa simulada. exe5.md <p>Al\u00e9m disso, voc\u00ea pode consultar:</p> <ul> <li>Manifests Kubernetes: <code>k8s/*.yaml</code> \u2014 Deployments, Services e HPAs para cada servi\u00e7o.  </li> <li>Testes de carga: Scripts K6 em <code>k6/*.js</code> e resultados do HPA escalando sob carga.  </li> <li>Relat\u00f3rio de custos: costs.md \u2014 estimativa de custos mensais no AWS.  </li> </ul> <p>reposit\u00f3rios usados:  https://github.com/giovannyjvr/plataformas https://github.com/giovannyjvr/gateway-service https://github.com/giovannyjvr/order-service https://github.com/giovannyjvr/account-service https://github.com/giovannyjvr/exchange-service https://github.com/giovannyjvr/p-auth-service https://github.com/giovannyjvr/product-service</p>"},{"location":"projeto/","title":"Projeto Microservi\u00e7os \u2013 INSper","text":"<p>Aluno: Giovanny Russo</p>"},{"location":"projeto/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Neste projeto, foram desenvolvidos e orquestrados em Kubernetes (EKS) cinco microservi\u00e7os que comp\u00f5em uma aplica\u00e7\u00e3o de e-commerce:</p> <ul> <li>account \u2014 gerencia contas de usu\u00e1rio e autentica\u00e7\u00e3o</li> <li>product \u2014 cat\u00e1logo de produtos</li> <li>exchange \u2014 servi\u00e7o de processamento de pagamentos (pagamento simulado)</li> <li>order \u2014 registro e consulta de pedidos</li> <li>gateway \u2014 API Gateway unificado com autentica\u00e7\u00e3o JWT</li> </ul> <p>Cada servi\u00e7o foi empacotado em imagem Docker e publicado no Amazon ECR, implantado como Deployment no EKS e exposto via LoadBalancer.</p>"},{"location":"projeto/#infraestrutura-e-orquestracao","title":"Infraestrutura e Orquestra\u00e7\u00e3o","text":"<ul> <li> <p>Kubernetes (EKS)</p> </li> <li> <p>Deployments e Services para cada microservi\u00e7o</p> </li> <li>Recursos definidos (requests/limits de CPU e mem\u00f3ria)</li> <li> <p>Horizontal Pod Autoscaler (HPA) configurado para <code>account</code> e <code>product</code>, escalando de 1 at\u00e9 5 r\u00e9plicas com base em CPU (50%)</p> </li> <li> <p>Testes de Carga (k6)</p> </li> <li> <p>Scripts <code>loadtest-account.js</code> e <code>loadtest-product.js</code> para gerar alta carga e validar escalonamento autom\u00e1tico</p> </li> <li>HPA observado escalonando r\u00e9plicas durante a carga e desescalando ao t\u00e9rmino</li> </ul>"},{"location":"projeto/#simulacao-de-custos-mensal","title":"Simula\u00e7\u00e3o de Custos (mensal)","text":"<p>Total estimado: 177,85\u202fUS\\$</p> <p>Detalhes em: <code>Plano-de-custos.md</code></p>"},{"location":"projeto/#cicd-e-pass","title":"CI/CD e PASS","text":"<ul> <li>CI/CD: Planejado pipeline Jenkins para build em Docker Hub e deploy autom\u00e1tico no EKS</li> <li>PASS: Pontos de aten\u00e7\u00e3o esperados em disponibilidade e seguran\u00e7a</li> </ul> <p>Obs.: CI/CD e PASS n\u00e3o implementados.</p>"},{"location":"projeto/#documentacao-complementar","title":"Documenta\u00e7\u00e3o Complementar","text":"<ul> <li>Exerc\u00edcios Individuais (1\u20135): <code>docs/exercises.md</code></li> <li>Detalhes Exe2: <code>docs/exe1.md</code></li> <li>Detalhes Exe2: <code>docs/exe2.md</code></li> <li>Detalhes Exe3: <code>docs/exe3.md</code></li> <li>Detalhes Exe4: <code>docs/exe4.md</code></li> <li>Detalhes Exe5: <code>docs/exe5.md</code></li> </ul> <p>Giovanny Russo \u2013 Junho 2025</p>"}]}