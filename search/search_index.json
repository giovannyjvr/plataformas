{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o do Projeto Microservi\u00e7os \u2013 INSper","text":"<p>Aluno: Giovanny Russo</p>"},{"location":"#visao-geral-do-projeto","title":"Vis\u00e3o Geral do Projeto","text":"<p>Este reposit\u00f3rio re\u00fane todos os Exerc\u00edcios Individuais (1\u20135) solicitados no curso de Plataforma. Abaixo, voc\u00ea encontrar\u00e1: - Descri\u00e7\u00e3o de cada exerc\u00edcio e seus endpoints - C\u00f3digo-fonte de cada microservi\u00e7o - Pipeline de CI/CD (Jenkins) - Manifestos Kubernetes (Orquestra\u00e7\u00e3o) - Documenta\u00e7\u00e3o geral, gargalos, apresenta\u00e7\u00e3o e v\u00eddeo de demonstra\u00e7\u00e3o</p>"},{"location":"#links-dos-repositorios","title":"Links dos Reposit\u00f3rios","text":"<ul> <li>Reposit\u00f3rio principal (este):     https://github.com/giovannyjvr/plataformas  </li> </ul>"},{"location":"apresentacao/","title":"Apresenta\u00e7\u00e3o do Projeto","text":"<p>Nesta se\u00e7\u00e3o, voc\u00ea pode baixar os slides e assistir ao v\u00eddeo de 2\u20133 minutos.</p>"},{"location":"apresentacao/#slides-em-pdf","title":"Slides em PDF","text":"<p>Baixe os slides da apresenta\u00e7\u00e3o (10\u201315 p\u00e1ginas) aqui: Download dos Slides</p>"},{"location":"apresentacao/#video-de-apresentacao","title":"V\u00eddeo de Apresenta\u00e7\u00e3o","text":"<p>Abaixo est\u00e1 embedado o v\u00eddeo de 2\u20133 minutos (YouTube/Drive).  </p>"},{"location":"auth_service/","title":"Auth Service","text":"<p>Peso no checkpoint: 15% (Seguran\u00e7a)</p> <p>O Auth Service \u00e9 respons\u00e1vel por autenticar usu\u00e1rios e emitir tokens JWT (JSON Web Tokens).</p>"},{"location":"auth_service/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<ul> <li>Linguagem/Framework: Java 17 + Spring Boot  </li> <li>Ponto de entrada: <code>exercise2-auth-service/src/main/java/com/insper/authservice/AuthServiceApplication.java</code> </li> <li>Responsabilidade: </li> <li>Receber credenciais (<code>username</code> e <code>password</code>) via <code>POST /login</code> </li> <li>Validar credenciais (hard-coded ou em mem\u00f3ria)  </li> <li>Gerar JWT assinado com <code>HS256</code> e <code>SECRET_KEY</code> </li> <li>Retornar JSON com: <code>json     {       \"access_token\": \"&lt;token&gt;\",       \"token_type\": \"bearer\"     }</code></li> </ul>"},{"location":"auth_service/#tecnologias-e-dependencias","title":"Tecnologias e Depend\u00eancias","text":"<ul> <li>Spring Boot Starter Web  </li> <li>JJWT (io.jsonwebtoken)  </li> <li>Spring Security (se aplic\u00e1vel)  </li> <li>Maven (build e depend\u00eancias)</li> </ul> <p>Trecho relevante do <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"auth_service/#configuracao-e-variaveis-de-ambiente","title":"Configura\u00e7\u00e3o e Vari\u00e1veis de Ambiente","text":"<p>Em <code>exercise2-auth-service/src/main/resources/application.properties</code>:</p> <pre><code>server.port=8001\n\n# Chave secreta (deve ser id\u00eantica \u00e0 do Product Service)\nsecurity.jwt.secret=MINHA_CHAVE_SECRETA_EXEMPLO_MUITO_FORTE\n\n# Algoritmo usado (HS256)\nsecurity.jwt.algorithm=HS256\n\n# Tempo de expira\u00e7\u00e3o do JWT (ms). Ex: 3600000 = 1 hora\nsecurity.jwt.expiration=3600000\n</code></pre>"},{"location":"auth_service/#endpoints-disponiveis","title":"Endpoints Dispon\u00edveis","text":""},{"location":"auth_service/#post-login","title":"POST /login","text":"<ul> <li>Descri\u00e7\u00e3o: Valida usu\u00e1rio e senha, retorna JWT.  </li> <li>URL: <code>http://localhost:8001/login</code> </li> <li>Headers: <code>Content-Type: application/json</code> </li> <li>Body (JSON): <code>json   {     \"username\": \"usuario\",     \"password\": \"senha\"   }</code> </li> <li>Respostas poss\u00edveis: </li> <li>200 OK <code>json     {       \"access_token\": \"eyJhbGciOiJIUzI1NiJ9\u2026\",       \"token_type\": \"bearer\"     }</code> </li> <li>401 Unauthorized <code>json     {       \"error\": \"Credenciais inv\u00e1lidas\"     }</code></li> </ul>"},{"location":"auth_service/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code>curl -X POST http://localhost:8001/login   -H \"Content-Type: application/json\"   -d '{\"username\":\"fulano\",\"password\":\"senha\"}'\n</code></pre> <p>Retorna:</p> <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiJ9\u2026\",\n  \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"auth_service/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ul> <li>Use HTTPS em produ\u00e7\u00e3o.  </li> <li>Nunca exponha <code>SECRET_KEY</code> em reposit\u00f3rios p\u00fablicos.  </li> <li>Para persist\u00eancia real de usu\u00e1rios, substitua a valida\u00e7\u00e3o est\u00e1tica por um banco ou servi\u00e7o de identidade.  </li> <li>Adicione testes unit\u00e1rios (JUnit) para validar <code>/login</code> tanto para credenciais v\u00e1lidas quanto inv\u00e1lidas.  </li> </ul>"},{"location":"docker_k8s/","title":"Docker e Kubernetes (Orquestra\u00e7\u00e3o)","text":"<p>Peso no checkpoint: 15% (Orquestra\u00e7\u00e3o)</p> <p>Nesta se\u00e7\u00e3o, detalhamos como gerar imagens Docker para cada servi\u00e7o e como aplicar manifestos Kubernetes em um cluster (Minikube ou EKS).</p>"},{"location":"docker_k8s/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Docker instalado  </li> <li>kubectl configurado (para Minikube ou EKS)  </li> <li>Minikube (ou cluster EKS ativo)  </li> <li>(Opcional) Helm, se for usar charts</li> </ul>"},{"location":"docker_k8s/#1-criar-imagens-docker","title":"1. Criar Imagens Docker","text":""},{"location":"docker_k8s/#auth-service","title":"Auth Service","text":"<ol> <li>Acesse <code>exercise2-auth-service/</code>.  </li> <li>Compile e empacote:    <code>bash    cd exercise2-auth-service    mvn clean package -DskipTests</code> </li> <li>Gere a imagem:    <code>bash    docker build -t meu-usuario/exercise2-auth-service:latest .</code> </li> <li>Teste local:    <code>bash    docker run -d -p 8001:8001      -e \"security.jwt.secret=MINHA_CHAVE_SECRETA_EXEMPLO_MUITO_FORTE\"      meu-usuario/exercise2-auth-service:latest</code></li> </ol>"},{"location":"docker_k8s/#product-service","title":"Product Service","text":"<ol> <li><code>cd exercise2-product-service</code> </li> <li><code>mvn clean package -DskipTests</code> </li> <li><code>docker build -t meu-usuario/exercise2-product-service:latest .</code> </li> <li><code>docker run -d -p 8002:8002      -e \"security.jwt.secret=MINHA_CHAVE_SECRETA_EXEMPLO_MUITO_FORTE\"      meu-usuario/exercise2-product-service:latest</code></li> </ol>"},{"location":"docker_k8s/#portal","title":"Portal","text":"<ol> <li><code>cd exercise2-portal</code> </li> <li><code>mvn clean package -DskipTests</code> </li> <li><code>docker build -t meu-usuario/exercise2-portal:latest .</code> </li> <li><code>docker run -d -p 8003:8003      -e \"portal.auth.url=http://localhost:8001\"      -e \"portal.product.url=http://localhost:8002\"      meu-usuario/exercise2-portal:latest</code></li> </ol>"},{"location":"docker_k8s/#order-service","title":"Order Service","text":"<ol> <li><code>cd exercise3-order-service</code> </li> <li><code>mvn clean package -DskipTests</code> </li> <li><code>docker build -t meu-usuario/exercise3-order-service:latest .</code> </li> <li><code>docker run -d -p 8004:8004 meu-usuario/exercise3-order-service:latest</code></li> </ol>"},{"location":"docker_k8s/#2-manifestos-kubernetes","title":"2. Manifestos Kubernetes","text":"<p>No diret\u00f3rio <code>exercise5-k8s/</code>, existe o arquivo <code>k8s.yaml</code> contendo:</p> <ul> <li>Secrets (Auth e Product compartilham <code>SECRET_KEY</code>)  </li> <li>ConfigMaps, se houver vari\u00e1veis de configura\u00e7\u00e3o n\u00e3o sens\u00edveis  </li> <li>Deployments para cada servi\u00e7o (Auth, Product, Portal, Order)  </li> <li>Services (ClusterIP ou LoadBalancer) para expor cada Deployment</li> </ul>"},{"location":"docker_k8s/#exemplo-de-k8syaml","title":"Exemplo de <code>k8s.yaml</code>","text":"<pre><code># Secret Auth\napiVersion: v1\nkind: Secret\nmetadata:\n  name: auth-secret\ntype: Opaque\ndata:\n  SECRET_KEY: TUlOSElDSEFURA...           # Base64 da chave secreta\n\n---\n# Deployment Auth\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: auth\n  template:\n    metadata:\n      labels:\n        app: auth\n    spec:\n      containers:\n        - name: auth-container\n          image: meu-usuario/exercise2-auth-service:latest\n          ports:\n            - containerPort: 8001\n          env:\n            - name: SECURITY_JWT_SECRET\n              valueFrom:\n                secretKeyRef:\n                  name: auth-secret\n                  key: SECRET_KEY\n\n---\n# Service Auth\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth-service\nspec:\n  selector:\n    app: auth\n  ports:\n    - port: 80\n      targetPort: 8001\n  type: ClusterIP\n\n---\n# Secret Product\napiVersion: v1\nkind: Secret\nmetadata:\n  name: product-secret\ntype: Opaque\ndata:\n  SECRET_KEY: TUlOSElDSEFURA...           # Base64 id\u00eantica ao Auth\n\n---\n# Deployment Product\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n        - name: product-container\n          image: meu-usuario/exercise2-product-service:latest\n          ports:\n            - containerPort: 8002\n          env:\n            - name: SECURITY_JWT_SECRET\n              valueFrom:\n                secretKeyRef:\n                  name: product-secret\n                  key: SECRET_KEY\n\n---\n# Service Product\napiVersion: v1\nkind: Service\nmetadata:\n  name: product-service\nspec:\n  selector:\n    app: product\n  ports:\n    - port: 80\n      targetPort: 8002\n  type: ClusterIP\n\n---\n# Deployment Portal\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: portal-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: portal\n  template:\n    metadata:\n      labels:\n        app: portal\n    spec:\n      containers:\n        - name: portal-container\n          image: meu-usuario/exercise2-portal:latest\n          ports:\n            - containerPort: 8003\n          env:\n            - name: PORTAL_AUTH_URL\n              value: \"http://auth-service\"\n            - name: PORTAL_PRODUCT_URL\n              value: \"http://product-service\"\n\n---\n# Service Portal\napiVersion: v1\nkind: Service\nmetadata:\n  name: portal-service\nspec:\n  selector:\n    app: portal\n  ports:\n    - port: 80\n      targetPort: 8003\n  type: ClusterIP\n\n---\n# Deployment Order\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n        - name: order-container\n          image: meu-usuario/exercise3-order-service:latest\n          ports:\n            - containerPort: 8004\n          env:\n            - name: PRODUCT_URL\n              value: \"http://product-service\"\n            - name: AUTH_URL\n              value: \"http://auth-service\"\n\n---\n# Service Order\napiVersion: v1\nkind: Service\nmetadata:\n  name: order-service\nspec:\n  selector:\n    app: order\n  ports:\n    - port: 80\n      targetPort: 8004\n  type: ClusterIP\n</code></pre>"},{"location":"docker_k8s/#3-faqs","title":"3. FAQs","text":"<p>Crie um arquivo de perguntas frequentes para d\u00favidas recorrentes:</p> <pre><code># FAQ e Observa\u00e7\u00f5es Adicionais\n\n### Como alterar a porta do Auth Service?\nEdite `exercise2-auth-service/src/main/resources/application.properties`:\n```properties\nserver.port=9001\n</code></pre> <p>Recompile e replique a imagem Docker.</p>"},{"location":"docker_k8s/#por-que-o-product-service-retorna-401-com-token-valido","title":"Por que o Product Service retorna 401 com token v\u00e1lido?","text":"<p>Verifique se em <code>application.properties</code> do Product Service a chave <code>security.jwt.secret</code> \u00e9 exatamente a mesma usada no Auth Service. Se houver diferen\u00e7a de encoding (Base64 vs. plain), ajuste o <code>JwtUtil</code> para decodificar corretamente.</p>"},{"location":"docker_k8s/#como-debugar-erros-no-portal","title":"Como debugar erros no Portal?","text":"<ul> <li>Verifique logs no console (executando com <code>mvn spring-boot:run</code>).</li> <li>Use ferramentas de inspe\u00e7\u00e3o do navegador para analisar requisi\u00e7\u00f5es HTTP.</li> <li>Certifique-se de que as URLs em <code>application.properties</code> do Portal (<code>portal.auth.url</code> e <code>portal.product.url</code>) est\u00e3o corretas.</li> </ul>"},{"location":"docker_k8s/#como-testar-localmente-o-deployment-kubernetes","title":"Como testar localmente o Deployment Kubernetes?","text":"<ol> <li>Verifique se o Minikube ou EKS est\u00e1 ativo: <code>bash    kubectl cluster-info</code></li> <li>Aplique os manifests:    <code>bash    kubectl apply -f exercise5-k8s/k8s.yaml</code></li> <li>Confira pods:    <code>bash    kubectl get pods</code></li> <li>Teste acesso (via port-forward):    <code>bash    kubectl port-forward service/product-service 8080:80    curl http://localhost:8080/product</code></li> </ol>"},{"location":"docker_k8s/#como-gerar-e-publicar-a-documentacao-mkdocs","title":"Como gerar e publicar a documenta\u00e7\u00e3o MkDocs?","text":"<ol> <li>Instale MkDocs:    <code>bash    pip install mkdocs mkdocs-material</code></li> <li>Gere e visualize local:    <code>bash    mkdocs serve</code></li> <li>Gere vers\u00e3o est\u00e1tica:    <code>bash    mkdocs build</code></li> <li>Publique no GitHub Pages:    <code>bash    mkdocs gh-deploy</code></li> </ol> <p>Obrigado por acompanhar esta documenta\u00e7\u00e3o!</p>"},{"location":"faq/","title":"FAQ e Observa\u00e7\u00f5es Adicionais","text":""},{"location":"faq/#como-alterar-a-porta-do-auth-service","title":"Como alterar a porta do Auth Service?","text":"<p>Edite <code>exercise2-auth-service/src/main/resources/application.properties</code>:</p> <pre><code>server.port=9001\n</code></pre> <p>Recompile e replique a imagem Docker.</p>"},{"location":"faq/#por-que-o-product-service-retorna-401-com-token-valido","title":"Por que o Product Service retorna 401 com token v\u00e1lido?","text":"<p>Verifique se em <code>application.properties</code> do Product Service a chave <code>security.jwt.secret</code> \u00e9 exatamente a mesma usada no Auth Service. Se houver diferen\u00e7a de encoding (Base64 vs. plain), ajuste o <code>JwtUtil</code> para decodificar corretamente.</p>"},{"location":"faq/#como-debugar-erros-no-portal","title":"Como debugar erros no Portal?","text":"<ul> <li>Verifique logs no console (executando com <code>mvn spring-boot:run</code>).</li> <li>Use ferramentas de inspe\u00e7\u00e3o do navegador para analisar requisi\u00e7\u00f5es HTTP.</li> <li>Certifique-se de que as URLs em <code>application.properties</code> do Portal (<code>portal.auth.url</code> e <code>portal.product.url</code>) est\u00e3o corretas.</li> </ul>"},{"location":"faq/#como-testar-localmente-o-deployment-kubernetes","title":"Como testar localmente o Deployment Kubernetes?","text":"<ol> <li>Verifique se o Minikube ou EKS est\u00e1 ativo: <code>bash    kubectl cluster-info</code></li> <li>Aplique os manifests:    <code>bash    kubectl apply -f exercise5-k8s/k8s.yaml</code></li> <li>Confira pods:    <code>bash    kubectl get pods</code></li> <li>Teste acesso (via port-forward):    <code>bash    kubectl port-forward service/product-service 8080:80    curl http://localhost:8080/product</code></li> </ol>"},{"location":"faq/#como-gerar-e-publicar-a-documentacao-mkdocs","title":"Como gerar e publicar a documenta\u00e7\u00e3o MkDocs?","text":"<ol> <li>Instale MkDocs:    <code>bash    pip install mkdocs mkdocs-material</code></li> <li>Gere e visualize local:    <code>bash    mkdocs serve</code></li> <li>Gere vers\u00e3o est\u00e1tica:    <code>bash    mkdocs build</code></li> <li>Publique no GitHub Pages:    <code>bash    mkdocs gh-deploy</code></li> </ol> <p>Obrigado por acompanhar esta documenta\u00e7\u00e3o!</p>"},{"location":"gargalos/","title":"Gargalos e Como Resolvi","text":""},{"location":"gargalos/#gargalo-1-propagacao-e-validacao-de-jwt","title":"Gargalo 1 \u2013 Propaga\u00e7\u00e3o e Valida\u00e7\u00e3o de JWT","text":"<p>Problema: - T\u00ednhamos tr\u00eas microservi\u00e7os (Auth, Product e Order) e o Portal precisava chamar cada um deles. - Como manter a mesma <code>SECRET_KEY</code> e algoritmo (HS256) em todos, para que o token gerado pelo Auth fosse aceito pelo Product e pelo Order? - Em que momento validar? Se a chave divergir, devolvia 401.</p> <p>Solu\u00e7\u00e3o: 1. Defini em <code>exercise2-auth-service/src/main/resources/application.properties</code>:    <code>properties    security.jwt.secret=MINHA_CHAVE_SECRETA_EXEMPLO_MUITO_FORTE    security.jwt.algorithm=HS256</code> 2. Copiei exata mesma string em <code>exercise2-product-service/src/main/resources/application.properties</code> e em <code>exercise3-order-service/src/main/resources/application.properties</code>. 3. Criei a classe <code>JwtUtil.java</code> em cada projeto (Auth, Product e Order) que decodifica e valida via <code>Jwts.parserBuilder().setSigningKey(secretKey).build().parseClaimsJws(token)</code>. 4. Nos controllers (ProductController, OrderController), chamei:    <code>java    private void validateToken(HttpServletRequest req) {        String header = req.getHeader(\"Authorization\");        if (header == null || !header.startsWith(\"Bearer \")) {            throw new RuntimeException(\"Token ausente ou mal formatado\");        }        jwtUtil.validateToken(header.substring(7));    }</code> 5. No Portal, armazenei o token em sess\u00e3o HTTP (<code>session.setAttribute(\"TOKEN\", token)</code>) e para cada chamada a <code>restTemplate</code> do Product/Order enviei:    <code>java    headers.setBearerAuth((String) session.getAttribute(\"TOKEN\"));</code> 6. Testei localmente (via <code>curl</code>) para confirmar que, se eu mudasse a chave no Auth, o Product retornava 401. 7. Inclu\u00ed capturas de tela em <code>product_service.md</code> e <code>order_service.md</code> mostrando \u201c401 Unauthorized\u201d sem token e \u201c200 OK\u201d com token.</p>"},{"location":"gargalos/#gargalo-2-configurar-secret-no-kubernetes-para-secret_key","title":"Gargalo 2 \u2013 Configurar Secret no Kubernetes para <code>SECRET_KEY</code>","text":"<p>Problema: - O manifest do Kubernetes n\u00e3o podia expor a <code>SECRET_KEY</code> em texto simples (precisava mascarar em Base64). - Cada Deployment precisava dessa vari\u00e1vel para validar JWT.</p> <p>Solu\u00e7\u00e3o: 1. Gere a chave em Base64:    <code>bash    echo -n \"MINHA_CHAVE_SECRETA_EXEMPLO_MUITO_FORTE\" | base64    # resultado: TUlOSEhBVEJBU0U2NEFCQ0RFRkdISUpd</code> 2. Em <code>exercise5_k8s/k8s.yaml</code>, adicionei o bloco Secret:    <code>yaml    apiVersion: v1    kind: Secret    metadata:      name: auth-secret    type: Opaque    data:      SECRET_KEY: TUlOSEhBVEJBU0U2NEFCQ0RFRkdISUpd</code> 3. No Deployment do Auth Service:    <code>yaml    env:      - name: SECURITY_JWT_SECRET        valueFrom:          secretKeyRef:            name: auth-secret            key: SECRET_KEY</code> 4. Repeti esse mesmo Secret (mesmo valor em Base64) para <code>product-secret</code> e <code>order-secret</code> dentro do mesmo arquivo <code>k8s.yaml</code>, de modo que Auth, Product e Order compartilhassem a mesma <code>SECRET_KEY</code>. 5. Validei com:    <code>bash    kubectl get secret auth-secret -o yaml    kubectl describe pod auth-deployment-xxxxx</code>    \u2192 Vi que a vari\u00e1vel de ambiente <code>SECURITY_JWT_SECRET</code> estava corretamente injetada no container. 6. Documentei todo esse processo em <code>docker_k8s.md</code> (h\u00e1 prints do Minikube Dashboard mostrando pods \u201cRunning\u201d).</p>"},{"location":"order_service/","title":"Order Service","text":"<p>Peso no checkpoint:  (Exerc\u00edcio 3)</p> <p>O Order Service gerencia pedidos (orders) e possui endpoints para criar, listar, buscar e excluir pedidos.</p>"},{"location":"order_service/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<ul> <li>Linguagem/Framework: Java 17 + Spring Boot  </li> <li>Ponto de entrada: <code>exercise3-order-service/src/main/java/com/insper/orderservice/OrderServiceApplication.java</code> </li> <li>Persist\u00eancia: In-Memory ou banco configurado  </li> <li>Porta: 8004 (ou conforme <code>application.properties</code>)</li> </ul>"},{"location":"order_service/#tecnologias-e-dependencias","title":"Tecnologias e Depend\u00eancias","text":"<ul> <li>Spring Boot Starter Web  </li> <li>Jackson Databind  </li> <li>Maven</li> </ul> <p>Trecho relevante do <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"order_service/#endpoints-disponiveis","title":"Endpoints Dispon\u00edveis","text":""},{"location":"order_service/#post-order","title":"POST /order","text":"<ul> <li>Descri\u00e7\u00e3o: cria um novo pedido.  </li> <li>URL: <code>http://localhost:8004/order</code> </li> <li>Headers: <code>Content-Type: application/json</code> </li> <li>Body (JSON): <code>json   {     \"productId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",     \"quantity\": 3,     \"userId\": \"fulano\"   }</code> </li> <li>Respostas poss\u00edveis: </li> <li>201 Created (pedido criado)  </li> <li>400 Bad Request (dados inv\u00e1lidos)</li> </ul>"},{"location":"order_service/#get-order","title":"GET /order","text":"<ul> <li>URL: <code>http://localhost:8004/order</code> </li> <li>Descri\u00e7\u00e3o: lista todos os pedidos.  </li> <li>Resposta (200 OK): Lista de objetos JSON com todos os pedidos.</li> </ul>"},{"location":"order_service/#get-orderid","title":"GET /order/{id}","text":"<ul> <li>URL: <code>http://localhost:8004/order/{id}</code> </li> <li>Descri\u00e7\u00e3o: retorna um pedido espec\u00edfico.  </li> <li>Respostas: </li> <li>200 OK com JSON do pedido  </li> <li>404 Not Found se n\u00e3o existir</li> </ul>"},{"location":"order_service/#delete-orderid","title":"DELETE /order/{id}","text":"<ul> <li>URL: <code>http://localhost:8004/order/{id}</code> </li> <li>Descri\u00e7\u00e3o: exclui um pedido pelo ID.  </li> <li>Respostas: </li> <li>204 No Content (pedido exclu\u00eddo)  </li> <li>404 Not Found </li> </ul>"},{"location":"order_service/#exemplos-de-uso","title":"Exemplos de Uso","text":"<pre><code># Criar pedido\ncurl -X POST http://localhost:8004/order   -H \"Content-Type: application/json\"   -d '{\"productId\":\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\"quantity\":3,\"userId\":\"fulano\"}'\n\n# Listar pedidos\ncurl -X GET http://localhost:8004/order\n\n# Buscar pedido por ID\ncurl -X GET http://localhost:8004/order/abc123-def456\n\n# Excluir pedido\ncurl -X DELETE http://localhost:8004/order/abc123-def456\n</code></pre>"},{"location":"portal/","title":"Portal","text":"<p>Peso no checkpoint: 15% (Portal)</p> <p>O Portal \u00e9 a interface web que consome o Auth Service e o Product Service, permitindo: - Login - Listar produtos - Criar novo produto - Excluir produto</p>"},{"location":"portal/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<ul> <li>Linguagem/Framework: Java 17 + Spring Boot + Thymeleaf  </li> <li>Ponto de entrada: <code>exercise2-portal/src/main/java/com/insper/portal/PortalApplication.java</code> </li> <li>Porta: 8003 (configurado em <code>application.properties</code>)</li> </ul>"},{"location":"portal/#tecnologias-e-dependencias","title":"Tecnologias e Depend\u00eancias","text":"<ul> <li>Spring Boot Starter Web  </li> <li>Spring Boot Starter Thymeleaf  </li> <li>RestTemplate (para chamadas HTTP)  </li> <li>Jackson Databind</li> </ul> <p>Trecho relevante do <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"portal/#configuracao-e-variaveis-de-ambiente","title":"Configura\u00e7\u00e3o e Vari\u00e1veis de Ambiente","text":"<p>Em <code>exercise2-portal/src/main/resources/application.properties</code>:</p> <pre><code>server.port=8003\n\nportal.auth.url=http://localhost:8001\nportal.product.url=http://localhost:8002\n</code></pre> <p>Ajuste as URLs caso Auth ou Product rodem em portas diferentes.</p>"},{"location":"portal/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>exercise2-portal/\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 java\n        \u2502   \u2514\u2500\u2500 com.insper.portal\n        \u2502       \u251c\u2500\u2500 PortalApplication.java\n        \u2502       \u251c\u2500\u2500 config\n        \u2502       \u2502   \u2514\u2500\u2500 RestTemplateConfig.java\n        \u2502       \u251c\u2500\u2500 controller\n        \u2502       \u2502   \u2514\u2500\u2500 PortalController.java\n        \u2502       \u2514\u2500\u2500 model\n        \u2502           \u2514\u2500\u2500 ProductDto.java\n        \u2514\u2500\u2500 resources\n            \u251c\u2500\u2500 application.properties\n            \u2514\u2500\u2500 templates\n                \u251c\u2500\u2500 login.html\n                \u251c\u2500\u2500 products.html\n                \u2514\u2500\u2500 createProduct.html\n</code></pre>"},{"location":"portal/#funcionamento-do-portal","title":"Funcionamento do Portal","text":"<ol> <li>GET /login </li> <li> <p>Exibe formul\u00e1rio de login (<code>login.html</code>).</p> </li> <li> <p>POST /login </p> </li> <li>Envia <code>username</code> e <code>password</code> para <code>Auth Service (POST /login)</code>.  </li> <li>Recebe token e armazena em sess\u00e3o HTTP.  </li> <li> <p>Se bem-sucedido, redireciona para <code>/products</code>.</p> </li> <li> <p>GET /products </p> </li> <li>L\u00ea token da sess\u00e3o.  </li> <li>Chama <code>GET /product</code> do Product Service com header <code>Authorization: Bearer &lt;token&gt;</code>.  </li> <li> <p>Exibe lista de produtos em <code>products.html</code>.</p> </li> <li> <p>GET /products/new </p> </li> <li> <p>Exibe formul\u00e1rio para criar produto (<code>createProduct.html</code>).</p> </li> <li> <p>POST /products </p> </li> <li>Envia JSON com <code>name</code>, <code>price</code>, <code>unit</code> para <code>POST /product</code> (Product Service).  </li> <li> <p>Redireciona para <code>/products</code>.</p> </li> <li> <p>GET /products/delete/{id} </p> </li> <li>Chama <code>DELETE /product/{id}</code> do Product Service.  </li> <li>Redireciona para <code>/products</code>.</li> </ol>"},{"location":"portal/#exemplos-de-uso","title":"Exemplos de Uso","text":"<ol> <li> <p>Abra o navegador em: <code>http://localhost:8003/login</code></p> </li> <li> <p>Fa\u00e7a login e navegue para <code>/products</code>.  </p> </li> <li>Crie um novo produto e veja-o listado.  </li> <li>Para excluir, clique em \u201cExcluir\u201d na tabela de <code>products</code>.</li> </ol>"},{"location":"product_service/","title":"Product Service","text":"<p>Peso no checkpoint: 10% (Microservi\u00e7o CRUD)</p> <p>O Product Service gerencia (criar, listar, buscar e deletar) produtos em mem\u00f3ria, protegido por JWT emitido pelo Auth Service.</p>"},{"location":"product_service/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<ul> <li>Linguagem/Framework: Java 17 + Spring Boot  </li> <li>Ponto de entrada: <code>exercise2-product-service/src/main/java/com/insper/productservice/ProductServiceApplication.java</code> </li> <li>Persist\u00eancia: In-Memory (ConcurrentHashMap)  </li> <li>Porta: 8002 (configurado em <code>application.properties</code>)</li> </ul>"},{"location":"product_service/#tecnologias-e-dependencias","title":"Tecnologias e Depend\u00eancias","text":"<ul> <li>Spring Boot Starter Web  </li> <li>JJWT (io.jsonwebtoken)  </li> <li>Spring Boot Starter Validation (opcional)  </li> <li>Maven (build e depend\u00eancias)</li> </ul> <p>Trecho relevante do <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"product_service/#configuracao-e-variaveis-de-ambiente","title":"Configura\u00e7\u00e3o e Vari\u00e1veis de Ambiente","text":"<p>Em <code>exercise2-product-service/src/main/resources/application.properties</code>:</p> <pre><code>server.port=8002\n\n# Mesma SECRET_KEY usada no Auth Service\nsecurity.jwt.secret=MINHA_CHAVE_SECRETA_EXEMPLO_MUITO_FORTE\nsecurity.jwt.algorithm=HS256\n</code></pre> <p>Se o Auth Service usar Base64 para a chave, ajuste <code>JwtUtil</code> para decodificar via Base64.</p>"},{"location":"product_service/#modelos-de-dados","title":"Modelos de Dados","text":"<p>Em <code>com.insper.productservice.model.Product.java</code>:</p> <pre><code>public class Product {\n    private UUID id;\n    private String name;\n    private double price;\n    private String unit;\n    // Construtores, getters e setters\n}\n</code></pre> <p>Em <code>com.insper.productservice.repository.ProductRepository.java</code>, usamos <code>ConcurrentHashMap&lt;UUID, Product&gt;</code>.</p>"},{"location":"product_service/#endpoints-disponiveis","title":"Endpoints Dispon\u00edveis","text":"<p>Todas as rotas requerem:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"product_service/#post-product","title":"POST /product","text":"<ul> <li>URL: <code>http://localhost:8002/product</code> </li> <li>Headers: <code>Content-Type: application/json   Authorization: Bearer &lt;token&gt;</code> </li> <li>Body (JSON): <code>json   {     \"name\": \"Banana\",     \"price\": 2.5,     \"unit\": \"kg\"   }</code> </li> <li>Respostas poss\u00edveis: </li> <li>201 Created <code>json     {       \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",       \"name\": \"Banana\",       \"price\": 2.5,       \"unit\": \"kg\"     }</code> </li> <li>401 Unauthorized (token inv\u00e1lido)  </li> <li>400 Bad Request (dados inv\u00e1lidos)</li> </ul>"},{"location":"product_service/#get-product","title":"GET /product","text":"<ul> <li>URL: <code>http://localhost:8002/product</code> </li> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code> </li> <li>Resposta (200 OK): <code>json   [     {       \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",       \"name\": \"Banana\",       \"price\": 2.5,       \"unit\": \"kg\"     }   ]</code></li> </ul>"},{"location":"product_service/#get-productid","title":"GET /product/{id}","text":"<ul> <li>URL: <code>http://localhost:8002/product/{uuid}</code> </li> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code> </li> <li>Respostas poss\u00edveis: </li> <li>200 OK <code>json     {       \"id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",       \"name\": \"Banana\",       \"price\": 2.5,       \"unit\": \"kg\"     }</code> </li> <li>404 Not Found </li> <li>401 Unauthorized</li> </ul>"},{"location":"product_service/#delete-productid","title":"DELETE /product/{id}","text":"<ul> <li>URL: <code>http://localhost:8002/product/{uuid}</code> </li> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code> </li> <li>Respostas poss\u00edveis: </li> <li>204 No Content </li> <li>404 Not Found </li> <li>401 Unauthorized</li> </ul>"},{"location":"product_service/#exemplos-de-uso","title":"Exemplos de Uso","text":"<pre><code>TOKEN=$(curl -s -X POST http://localhost:8001/login   -H \"Content-Type: application/json\"   -d '{\"username\":\"fulano\",\"password\":\"senha\"}'   | jq -r .access_token)\n\n# Criar produto\ncurl -X POST http://localhost:8002/product   -H \"Authorization: Bearer $TOKEN\"   -H \"Content-Type: application/json\"   -d '{\"name\":\"Banana\",\"price\":2.5,\"unit\":\"kg\"}'\n\n# Listar produtos\ncurl -X GET http://localhost:8002/product   -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"}]}