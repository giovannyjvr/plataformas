version: '3.8'

services:

  ##############################################################################
  # 2) Auth Service (Spring Boot)
  ##############################################################################
  auth:
    build:
      context: "./api/exercise2-auth-service"
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      # Esta chave deve ser idêntica à que você usa no application.properties do Auth:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8001:8001"

  ##############################################################################
  # 3) Product Service (Spring Boot)
  ##############################################################################
  product:
    build:
      context: "./api/exercise2-product-service"
      dockerfile: Dockerfile
    container_name: product-service
    restart: unless-stopped
    environment:
      # Usamos a mesma chave do Auth Service para validar JWT:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - auth

  ##############################################################################
  # 4) Order Service (Spring Boot)
  ##############################################################################
  order:
    build:
      context: "./api/exercise3-order-service"
      dockerfile: Dockerfile
    container_name: order-service
    restart: unless-stopped
    environment:
      # Mesma chave do Auth para validar JWT:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # Se o Order Service fizer chamada interna ao Product:
      - PRODUCT_URL=http://product:8002
      # Se precisar chamar o Auth em tempo de execução:
      - AUTH_URL=http://auth:8001
    ports:
      - "8003:8003"
    depends_on:
      - auth
      - product

  ##############################################################################
  # 5) Portal Service (Spring Boot + Thymeleaf)
  ##############################################################################
  portal:
    build:
      context: "./api/exercise2-portal"
      dockerfile: Dockerfile
    container_name: portal-service
    restart: unless-stopped
    environment:
      # URLs internas (nome do serviço no Compose + porta):
      - PORTAL_AUTH_URL=http://auth:8001
      - PORTAL_PRODUCT_URL=http://product:8002
    ports:
      - "8004:8004"
    depends_on:
      - auth
      - product

  ##############################################################################
  # 6) Prometheus (para coletar métricas)
  ##############################################################################
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  ##############################################################################
  # 7) Grafana (para dashboards)
  ##############################################################################
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Senha padrão do admin (login: admin / senha: admin)
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      # Persiste dados do Grafana (dashboards, banco interno, etc.)
      - ./grafana:/var/lib/grafana
      # Se você tiver datasources pré‐configurados, coloque aqui:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  ##############################################################################
  # (Opcional) 8) Banco de dados Postgres (caso algum serviço precise)
  ##############################################################################
  # db:
  #   image: postgres:latest
  #   container_name: postgres-db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-store}
  #     - POSTGRES_USER=${POSTGRES_USER:-store}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-store}
  #   volumes:
  #     - $VOLUME/postgres/store:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
