version: "3.8"

services:

  ##############################################################################
  # 1) Auth Service (Spring Boot)
  ##############################################################################
  auth-service:
    build:
      context: "./api/exercise2-auth-service"   # <-- antes era "./exercise2-auth-service"
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8000:8080"
    networks:
      - plataformas_net
      - monitoring

  ##############################################################################
  # 2) Product Service (Spring Boot, H2 in memory)
  ##############################################################################
  product-service:
    build:
      context: "./api/exercise2-product-service"   # <-- antes era "./exercise2-product-service"
      dockerfile: Dockerfile
    container_name: product-service
    restart: unless-stopped
    ports:
      - "8001:8080"
    networks:
      - plataformas_net
      - monitoring

  ##############################################################################
  # 3) Customer Service (Spring Boot ou outro stack)
  ##############################################################################
  customer-service:
    build:
      context: "./api/exercise2-portal"   # <-- antes era "./exercise2-customer-service"
      dockerfile: Dockerfile
    container_name: customer-service
    restart: unless-stopped
    ports:
      - "8002:8080"
    networks:
      - plataformas_net
      - monitoring

  ##############################################################################
  # 4) Order Service (Spring Boot)
  ##############################################################################
  order-service:
    build:
      context: "./api/exercise3-order-service"   # <-- antes era "./exercise3-order-service"
      dockerfile: Dockerfile
    container_name: order-service
    restart: unless-stopped
    depends_on:
      - auth-service
      - product-service
      - customer-service
    ports:
      - "8003:8080"
    networks:
      - plataformas_net
      - monitoring


  portal-service:
    build:
      context: ./api/exercise2-portal
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod

  ##############################################################################
  # 5) Gateway (exchange-api, FastAPI)
  ##############################################################################
  gateway:
    build:
      context: "./api/exchange-api"   # <-- antes era "./exchange-api"
      dockerfile: Dockerfile
    container_name: gateway
    restart: unless-stopped
    depends_on:
      - auth-service
      - product-service
      - customer-service
      - order-service
    ports:
      - "8004:8000"
    networks:
      - plataformas_net
      - monitoring

  ##############################################################################
  # 6) Prometheus (para coletar métricas de todos os serviços)
  ##############################################################################
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - monitoring
      - plataformas_net
    depends_on:
      - auth-service
      - product-service
      - customer-service
      - order-service
      - gateway

  ##############################################################################
  # 7) Grafana (para visualizar dashboards)
  ##############################################################################
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "472"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
    depends_on:
      - prometheus

networks:
  plataformas_net:
    driver: bridge

  monitoring:
    driver: bridge
